Create the raphael holder
-------------------------
    
    var r = Raphael("holder", 600, 800);
    
Make a pie chart!
-----------------
   var data =  [10,10,25,50];
    
    var r = Raphael("holder", 600, 800);
    r.piechart(125, 125, 100, data)
    
Let's change the default colours
---------------------------------
   
   //add var
   colours = ["#225533", "#44bbcc", "#88dddd", "#bbeeff"];
   
   //add colours to the option last property
   r.piechart(125, 125, 100, [10,10,25,50], {colors:colours})
   
   
Now to sort the data - 
--------------------

I hacked the data.
hmmm... had to set json to team_data = and then replace all blanks with : "", maybe better way... 
        console.log(e["In Production"]); //ok so this is just a string, but we want a date



    remove data and introduce sorted datag

    var sortedData = []
    
    data.forEach(function(task) { //do I need task here?
        var dateFinished = moment(task["In Production"], "DD/MM/YYYY");
        if (dateFinished) {
            var month = dateFinished.month(), 
                year = dateFinished.year(),
                taskType = task["Type"]
        
		    if(sortedData[year] == undefined) sortedData[year] = new Object(); //?
		    if(sortedData[year][month] == undefined) sortedData[year][month] = new Object();
		    if(sortedData[year][month][taskType] == undefined) sortedData[year][month][taskType] = 0;
		
		    console.log(sortedData["2012"])
		    sortedData[year][month][taskType] ++; 
        }
	});
	
and add sort data
----------------
sortedData = sort_data();


do one month's worth of data


        sortedData = sort_data(),
        year = 2012, //<--note year is 2012
        month = 1, 
        features = sortedData[year][month]["MMF"] || 0,
        bugs = sortedData[year][month]["Bug"] || 0,
        infrastructure = sortedData[year][month]["Infrastructure"] || 0,
        maintenance = sortedData[year][month]["Maintenance"] || 0;
        
           
    var data = [features, bugs, infrastructure, maintenance];
    
    r.piechart(125, 125, 100, data, {colors:colours})

make it a bit smaller   
----------------------------
   x = 50,
   radius = 25,
    
   
   r.piechart(x, x, radius, data, {colors:colours})

    
print out label
---------------
       x = 50,
        y= 50,
        radius = 25,
        labelOffset = radius + 10,

    r.text(x, y + labelOffset, moment.monthsShort[month] + " " + year)
    

do all months
-------------

add an offset:

offset
------

   pieSpacing = radius + 55,
   
   

-------------

some will have no data
------------------------
       if (sortedData[year][month]) {
       
(could have sortedData do something about this?)

offset
------

   pieSpacing = radius + 55,
   
   x += pieSpacing; <-- I don't really want this to happen for the first one, but... to do 
   

iterate

-------

     for (var month = 0; month <= 11; month++) {
        var year = 2011;
        
       
       then 
       
       x += pieSpacing;


pop down a row every six months
--------------------------------
   add to vars
   
    line = 1,
    
    and make y
    
    y = pieSpacing * line,

    then add

        x += pieSpacing;
        
        if ((month+1) % 6 == 0) {
            x = 50;
            line++;
			y = pieSpacing * line;
		}

add a legend after the last line
--------------------------------

    
    x += pieSpacing;
    line++;
    y = pieSpacing * line;
	var legendOptions = { 
		legend: ["Features", "Bugs", "Infrastructure", "Maintenance"], 
		legendpos: "east",  
		label: [25, 25, 25, 25], 
		colors: colours}
	pie = r.piechart(x, y, radius, [25, 25, 25, 25], legendOptions);
    
ideally we want to know what they represent
-------------------------------------------

add hover in and hover out.
----------------------------

no idea how this works
-----------------------
            var pie = r.piechart(x, y, radius, data, {colors:colours}); 
            pie.hover(hoverIn, hoverOut);


function hoverIn() {
	this.sector.stop();
	this.flag = r.popup(this.mx, this.my, this.value.value).attr({
		fill: "0-#c9de96-#8ab66b:44-#398235",
		stroke: "#000"
	});
	this.sector.scale(1.5, 1.5, this.cx, this.cy);

	if (this.label) {
		this.label[0].stop();
		this.label[0].attr({
			r: 7.5
		});
		this.label[1].attr({
			"font-weight": 800
		});
	}
}

function hoverOut() {
	this.flag.animate({
		opacity: 0
	}, 300, function() {
		this.remove();
	});
	this.sector.animate({
		transform: 's1 1 ' + this.cx + ' ' + this.cy
	}, 500, "bounce");
	if (this.label) {
		this.label[0].animate({
			r: 5
		}, 500, "bounce");
		this.label[1].attr({
			"font-weight": 400
		});
	}
}
      


line graph
-----------------------------------------

make the canvas wider
------------------------

    var r = Raphael("holder", 2000, 800), 
    

    
linegraph
-----------------

<script type="text/javascript" src="lib/g.line.js"></script>

add the arrays
---------------

var lineX = [], lineYFeatures = [], lineYBugs = [], lineYInfrastructure = [];

push the data while we're here
------------------------------


            lineX.push(month);
            lineYFeatures.push(features);
            lineYBugs.push(bugs);
            lineYInfrastructure.push(infrastructure);
            
then draw a line graph
------------------------

 r.linechart(700, 60, 300, 220, lineX, [lineYFeatures, lineYBugs, lineYInfrastructure], { nostroke: false, axis: "0 0 1 1", symbol: "rect", smooth: true, colors: colours })
    
    
    
    

